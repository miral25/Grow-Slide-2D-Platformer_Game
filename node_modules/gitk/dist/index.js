#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const getCurrentVersion_1 = require("./utils/getCurrentVersion");
const fetch_1 = require("./commands/fetch");
const clear_1 = require("./commands/clear");
const open_1 = require("./commands/open");
const checkout_1 = require("./commands/checkout");
const branch_1 = require("./commands/branch");
const commit_1 = require("./commands/commit");
const jira_1 = require("./commands/jira");
const program = new commander_1.Command("gitk");
program.version((0, getCurrentVersion_1.getCurrentVersion)());
program
    .command("open")
    .description("깃허브 리퍼지토리를 브라우저로 엽니다. (SSH 방식으로 clone 한 경우에만 동작합니다)")
    .option("-i, --issue", "깃허브 리퍼지토리 - 이슈 페이지를 브라우저로 엽니다.")
    .option("-p, --pull_request", "깃허브 리퍼지토리 - 풀 리퀘스트 페이지를 브라우저로 엽니다.")
    .option("-a, --action", "깃허브 리퍼지토리 - 액션 페이지를 브라우저로 엽니다.")
    .action(open_1.open);
program
    .command("clear")
    .description("현재 깃 변경사항을 완전 초기화 합니다.")
    .action(clear_1.clear);
program
    .command("fetch")
    .description("로컬 브랜치 목록을 원격 리퍼지토리와 동일하게 맞춥니다. (로컬에 없으면 원격에서 가져오고, 원격에 없으면 로컬을 지웁니다)")
    .action(fetch_1.fetch);
program
    .command("checkout")
    .description("로컬에 브랜치가 있으면 로컬 브랜치로 이동하고, 로컬에 브랜치가 없으면 원격으로부터 브랜치를 가져온 뒤 이동합니다.")
    .action(checkout_1.checkout);
program
    .command("branch")
    .requiredOption("-n, --name <type>", "새로 만들 브랜치 명")
    .description("로컬과 원격에 새 브랜치를 만들고, 새 브랜치로 이동합니다.")
    .action(branch_1.branch);
program
    .command("commit")
    .requiredOption("-m, --message <type>", "커밋 제목")
    .description("JIRA 태그를 자동으로 붙혀주는 git commit을 합니다.")
    .action(commit_1.commit);
program
    .command("jira")
    .description("현재 브랜치와 연결되어있는 JIRA 이슈 페이지를 엽니다.")
    .action(jira_1.jira);
program.parse();
//# sourceMappingURL=index.js.map